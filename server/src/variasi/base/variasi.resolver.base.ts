/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Variasi } from "./Variasi";
import { VariasiCountArgs } from "./VariasiCountArgs";
import { VariasiFindManyArgs } from "./VariasiFindManyArgs";
import { VariasiFindUniqueArgs } from "./VariasiFindUniqueArgs";
import { CreateVariasiArgs } from "./CreateVariasiArgs";
import { UpdateVariasiArgs } from "./UpdateVariasiArgs";
import { DeleteVariasiArgs } from "./DeleteVariasiArgs";
import { ProductFindManyArgs } from "../../product/base/ProductFindManyArgs";
import { Product } from "../../product/base/Product";
import { VariasiService } from "../variasi.service";
@graphql.Resolver(() => Variasi)
export class VariasiResolverBase {
  constructor(protected readonly service: VariasiService) {}

  async _variasisMeta(
    @graphql.Args() args: VariasiCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Variasi])
  async variasis(
    @graphql.Args() args: VariasiFindManyArgs
  ): Promise<Variasi[]> {
    return this.service.variasis(args);
  }

  @graphql.Query(() => Variasi, { nullable: true })
  async variasi(
    @graphql.Args() args: VariasiFindUniqueArgs
  ): Promise<Variasi | null> {
    const result = await this.service.variasi(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Variasi)
  async createVariasi(
    @graphql.Args() args: CreateVariasiArgs
  ): Promise<Variasi> {
    return await this.service.createVariasi({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Variasi)
  async updateVariasi(
    @graphql.Args() args: UpdateVariasiArgs
  ): Promise<Variasi | null> {
    try {
      return await this.service.updateVariasi({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Variasi)
  async deleteVariasi(
    @graphql.Args() args: DeleteVariasiArgs
  ): Promise<Variasi | null> {
    try {
      return await this.service.deleteVariasi(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Product], { name: "products" })
  async findProducts(
    @graphql.Parent() parent: Variasi,
    @graphql.Args() args: ProductFindManyArgs
  ): Promise<Product[]> {
    const results = await this.service.findProducts(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
