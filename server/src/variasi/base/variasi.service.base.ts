/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Variasi as PrismaVariasi,
  Product as PrismaProduct,
} from "@prisma/client";

export class VariasiServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.VariasiCountArgs, "select">): Promise<number> {
    return this.prisma.variasi.count(args);
  }

  async variasis(args: Prisma.VariasiFindManyArgs): Promise<PrismaVariasi[]> {
    return this.prisma.variasi.findMany(args);
  }
  async variasi(
    args: Prisma.VariasiFindUniqueArgs
  ): Promise<PrismaVariasi | null> {
    return this.prisma.variasi.findUnique(args);
  }
  async createVariasi(args: Prisma.VariasiCreateArgs): Promise<PrismaVariasi> {
    return this.prisma.variasi.create(args);
  }
  async updateVariasi(args: Prisma.VariasiUpdateArgs): Promise<PrismaVariasi> {
    return this.prisma.variasi.update(args);
  }
  async deleteVariasi(args: Prisma.VariasiDeleteArgs): Promise<PrismaVariasi> {
    return this.prisma.variasi.delete(args);
  }

  async findProducts(
    parentId: string,
    args: Prisma.ProductFindManyArgs
  ): Promise<PrismaProduct[]> {
    return this.prisma.variasi
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .products(args);
  }
}
